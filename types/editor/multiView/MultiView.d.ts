import { Component, ReactNode } from 'react';
import { Camera, Object3D, OrthographicCamera, PerspectiveCamera, Scene, WebGLRenderer } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import RemoteThree from '@/core/remote/RemoteThree';
import { InteractionMode, MultiViewMode } from './MultiViewData';
import './MultiView.scss';
type MultiViewProps = {
    three: RemoteThree;
    scenes: Map<string, any>;
    onSceneSet?: (scene: Scene) => void;
    onSceneUpdate?: (scene: Scene) => void;
    onSceneResize?: (scene: Scene, width: number, height: number) => void;
};
type MultiViewState = {
    mode: MultiViewMode;
    modeOpen: boolean;
    renderModeOpen: boolean;
    interactionMode: InteractionMode;
    interactionModeOpen: boolean;
    lastUpdate: number;
};
export default class MultiView extends Component<MultiViewProps, MultiViewState> {
    static instance: MultiView | null;
    scene: Scene;
    renderer?: WebGLRenderer | null;
    currentScene?: Scene;
    cameras: Map<string, Camera>;
    controls: Map<string, OrbitControls>;
    currentCamera: PerspectiveCamera | OrthographicCamera;
    currentWindow: any;
    private cameraHelpers;
    private lightHelpers;
    private helpersContainer;
    private grid;
    private interactionHelper;
    private currentTransform?;
    private splineEditor;
    private depthMaterial;
    private normalsMaterial;
    private uvMaterial;
    private wireframeMaterial;
    private playing;
    private rafID;
    private cameraControlsRafID;
    private width;
    private height;
    private sceneSet;
    private tlCam;
    private trCam;
    private blCam;
    private brCam;
    private tlRender;
    private trRender;
    private blRender;
    private brRender;
    private cameraVisibility;
    private lightVisibility;
    selectedItem: Object3D | undefined;
    private debugCamera;
    private raycaster;
    private pointer;
    private cameraControls;
    private canvasRef;
    private containerRef;
    private tlWindow;
    private trWindow;
    private blWindow;
    private brWindow;
    constructor(props: MultiViewProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: Readonly<MultiViewProps>, prevState: Readonly<MultiViewState>, snapshot?: any): void;
    componentWillUnmount(): void;
    render(): ReactNode;
    private setupRenderer;
    private setupScene;
    private setupTools;
    play(): void;
    pause(): void;
    toggleOrbitControls(value: boolean): void;
    private update;
    private draw;
    private onUpdate;
    private enable;
    private disable;
    private resize;
    private sceneUpdate;
    private addCamera;
    private removeCamera;
    private onMouseMove;
    private onClick;
    private onKey;
    private onSetSelectedItem;
    private updateSelectedItemHelper;
    private onUpdateTransform;
    private clearLightHelpers;
    private addLightHelpers;
    private createControls;
    private clearCamera;
    private killControls;
    private assignControls;
    private updateCamera;
    private updateCameraControls;
    private clearControls;
    private saveExpandedCameraVisibility;
    private saveExpandedLightVisibility;
    private getSceneOverride;
    private drawTo;
    private drawSingle;
    private drawDouble;
    private drawQuad;
    get appID(): string;
    get mode(): MultiViewMode;
    get three(): RemoteThree;
    get expandedCameraVisibility(): string;
    get expandedLightVisibility(): string;
}
export {};
